#include "core/include/base.h"
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
Base::Base(std::string className)
{
	mClassName = className;
    mutex  = PTHREAD_MUTEX_INITIALIZER;
    cond = PTHREAD_COND_INITIALIZER;
}
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
Base::~Base()
{
}
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
std::string Base::getClassName()
{
	return mClassName;
}
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
bool Base::msgListEmpty()
{
    if(mMsgList.empty())
    {
        return true;
    }
	return false;
}
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
void * Base::getMsgFromListFront()
{
    if(mMsgList.empty())
    {
        return NULL;
    }
    void * msg = mMsgList.front();
	mMsgList.pop_front();
    return msg;
}
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
void Base::addMsgToListBack(void * msg)
{
	if(msg!=NULL)
	{
		mMsgList.push_back(msg);
	}
}
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
void Base::handleMsg(void * msg, void *data)
{
    //do nothing, work at derived class
}
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
pthread_mutex_t *Base::getMutexPtr()
{
    return &mutex;
}
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
pthread_cond_t *Base::getCondPtr()
{
    return &cond;
}
